[{"/home/amaan/fract project/todolist/todo/src/index.js":"1","/home/amaan/fract project/todolist/todo/src/App.js":"2","/home/amaan/fract project/todolist/todo/src/reportWebVitals.js":"3","/home/amaan/fract project/todolist/todo/src/Pages/Home/Home.js":"4","/home/amaan/fract project/todolist/todo/src/Components/navbar/navbar.js":"5","/home/amaan/fract project/todolist/todo/src/Components/Items/items.js":"6","/home/amaan/fract project/todolist/todo/src/Components/InputComp/InputComp.js":"7","/home/amaan/fract project/todolist/todo/src/Pages/bucket/bucket.js":"8","/home/amaan/fract project/todolist/todo/src/Actions/homedata.js":"9"},{"size":858,"mtime":1610291138326,"results":"10","hashOfConfig":"11"},{"size":528,"mtime":1610178247679,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610178247683,"results":"13","hashOfConfig":"11"},{"size":2293,"mtime":1610297177954,"results":"14","hashOfConfig":"11"},{"size":702,"mtime":1610291168978,"results":"15","hashOfConfig":"11"},{"size":3450,"mtime":1610288350882,"results":"16","hashOfConfig":"11"},{"size":3748,"mtime":1610290884296,"results":"17","hashOfConfig":"11"},{"size":2121,"mtime":1610291083682,"results":"18","hashOfConfig":"11"},{"size":333,"mtime":1610296670298,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"vxkkry",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/amaan/fract project/todolist/todo/src/index.js",[],["43","44"],"/home/amaan/fract project/todolist/todo/src/App.js",[],["45","46"],"/home/amaan/fract project/todolist/todo/src/reportWebVitals.js",[],"/home/amaan/fract project/todolist/todo/src/Pages/Home/Home.js",[],"/home/amaan/fract project/todolist/todo/src/Components/navbar/navbar.js",["47","48","49","50"],"import React from 'react';\nimport { Navbar,Nav,NavDropdown,Form,FormControl,Button } from 'react-bootstrap';\n\n\nconst NavBar = ()=>{\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand href=\"#home\">TO-DO LIST</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"/\">Home</Nav.Link>\n                    <Nav.Link href=\"bucket\">Buckets</Nav.Link>\n                    <Nav.Link href=\"about\">About</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n\nexport default NavBar;","/home/amaan/fract project/todolist/todo/src/Components/Items/items.js",["51","52","53","54","55","56"],"import React, { Component } from \"react\";\nimport { Container, Row, Col, ListGroup, ListGroupItem, InputGroup, FormControl, Button, Form, Badge } from 'react-bootstrap';\n\n\nclass Items extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            disableInput : true,\n            is_edit:false,\n            isChecked:false,\n            desc:''\n        }\n    }\n    componentDidMount() {\n        console.log(this.props.item)\n        this.setState({\n            isChecked:this.props.item.isChecked,\n            desc:this.props.item.desc\n        })\n    }\n    //update the todo task\n    updateTask = (data)=>{\n        this.setState({\n            task:data\n        })\n    }\n    //edit items \n    editItems = ()=> {\n        this.setState({\n            is_edit:true,\n            disableInput:false\n        })\n    }\n    //save the items after update\n    saveItems = ()=>{\n        this.setState({\n            disableInput:true,\n            is_edit:false\n        })\n    }\n    //delete items\n    deleteItems = ()=>{\n\n    }\n    //items complete checked\n    itemChecked = (data)=>{\n        this.setState({\n            isChecked:data\n        })\n    }\n    render() {\n        return (\n            <ListGroup.Item>\n                <Row>\n                    <Col md='9'>\n                        <div className=\"listInput\">\n                            <Form.Control\n                                type=\"text\"\n                                disabled = {this.state.disableInput}\n                                value={this.state.desc}\n                                onChange={(event)=>{\n                                    this.updateTask(event.target.value)\n                                }}  \n                            />\n                        </div>\n                    </Col>\n                    <Col md=\"3\">\n                        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                            {this.props.type == 'todolist' ?\n                                <>\n                                    <Form.Check type=\"checkbox\" \n                                    checked={this.state.isChecked} \n                                    label=\"Done\" \n                                    onChange={(event)=>{this.itemChecked(event.target.checked)}}/>\n                                    <Badge variant=\"info\" style={{ margin: '5px' }}>{this.props.item.bucketName}</Badge>\n                                </>\n                                : null\n                            }\n                            { this.state.is_edit ?\n                            <Badge \n                            variant=\"primary\" \n                            style={{ margin: '5px' }}\n                            onClick={()=>{ this.saveItems()}}>Save</Badge>\n                            :\n                            <Badge \n                            variant=\"secondary\" style={{ margin: '5px' }} \n                            onClick = {()=>{this.editItems()}}>Edit</Badge>\n                            }\n                            <Badge \n                            variant=\"warning\" \n                            style={{ margin: '5px' }}\n                            onClick={()=>{this.deleteItems()}}\n                            >Delete</Badge>\n                        </div>\n                    </Col>\n                </Row>\n            </ListGroup.Item>\n        )\n    }\n}\n\nexport default Items;","/home/amaan/fract project/todolist/todo/src/Components/InputComp/InputComp.js",["57","58","59","60","61","62","63","64"],"import React, { Component } from \"react\";\nimport { Container, Row, Col, ListGroup, ListGroupItem, InputGroup, FormControl, Button, Form, Badge } from 'react-bootstrap';\n\nclass InputComp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userInput:\"\",\n            type:'todolist',\n            selectedBucket:\"\"\n        }\n    }\n    componentDidMount() {\n        this.setState({\n            type:this.props.type\n        })\n    }\n\n    //update the filed on change\n    updateUserInput = (data) => {\n        this.setState({ userInput: data })\n    }\n\n    //select the bucket\n    selectBucket = (data) => {\n        this.setState({ selectedBucket: data })\n        console.log(data)\n    }\n    render() {\n        return (\n            <Form.Row>\n                {this.state.type != 'bucket' ?\n                    <>\n                        <Form.Group as={Col} md=\"8\" controlId=\"validationCustom01\">\n                            <Form.Label>Add Items</Form.Label>\n                            <Form.Control\n                                required\n                                select\n                                type=\"text\"\n                                placeholder=\"add items to the list\"\n                                onChange={(event) => {\n                                    this.updateUserInput(event.target.value)\n                                }}\n                            />\n                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"3\" controlId=\"exampleForm.ControlSelect1\">\n                            <Form.Label>select Bucket</Form.Label>\n                            <Form.Control as=\"select\" onChange={(event) => {\n                                this.selectBucket(event.target.value)\n                            }}>\n                                <option>1</option>\n                                <option>2</option>\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"2\">\n                            <Button variant=\"primary\" onClick={() => { this.props.addTask(\n                                this.state.userInput,\n                                this.state.selectedBucket,\n                                this.state.type\n                            ) }}>Add Items</Button>\n                        </Form.Group>\n                    </>\n                    :\n                    <>\n                        <Form.Group as={Col} md=\"9\" controlId=\"validationCustom01\">\n                            <Form.Label>Add Buckets</Form.Label>\n                            <Form.Control\n                                required\n                                select\n                                type=\"text\"\n                                placeholder=\"Add buckets\"\n                                onChange={(event) => {\n                                    this.updateUserInput(event.target.value)\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"3\">\n                            <Form.Label>Add Bucket</Form.Label>\n                            <div>\n                                <Button variant=\"primary\" onClick={() => { this.props.addBucket(\n                                    this.state.userInput,\n                                    this.state.type\n                                ) }}>Submit</Button>\n                            </div>\n                        </Form.Group>\n                    </>\n                }\n            </Form.Row>\n        )\n    }\n}\n\nexport default InputComp;","/home/amaan/fract project/todolist/todo/src/Pages/bucket/bucket.js",[],"/home/amaan/fract project/todolist/todo/src/Actions/homedata.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"65","replacedBy":"69"},{"ruleId":"67","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":2,"column":21,"nodeType":"73","messageId":"74","endLine":2,"endColumn":32},{"ruleId":"71","severity":1,"message":"75","line":2,"column":33,"nodeType":"73","messageId":"74","endLine":2,"endColumn":37},{"ruleId":"71","severity":1,"message":"76","line":2,"column":38,"nodeType":"73","messageId":"74","endLine":2,"endColumn":49},{"ruleId":"71","severity":1,"message":"77","line":2,"column":50,"nodeType":"73","messageId":"74","endLine":2,"endColumn":56},{"ruleId":"71","severity":1,"message":"78","line":2,"column":10,"nodeType":"73","messageId":"74","endLine":2,"endColumn":19},{"ruleId":"71","severity":1,"message":"79","line":2,"column":42,"nodeType":"73","messageId":"74","endLine":2,"endColumn":55},{"ruleId":"71","severity":1,"message":"80","line":2,"column":57,"nodeType":"73","messageId":"74","endLine":2,"endColumn":67},{"ruleId":"71","severity":1,"message":"76","line":2,"column":69,"nodeType":"73","messageId":"74","endLine":2,"endColumn":80},{"ruleId":"71","severity":1,"message":"77","line":2,"column":82,"nodeType":"73","messageId":"74","endLine":2,"endColumn":88},{"ruleId":"81","severity":1,"message":"82","line":70,"column":46,"nodeType":"83","messageId":"84","endLine":70,"endColumn":48},{"ruleId":"71","severity":1,"message":"78","line":2,"column":10,"nodeType":"73","messageId":"74","endLine":2,"endColumn":19},{"ruleId":"71","severity":1,"message":"85","line":2,"column":21,"nodeType":"73","messageId":"74","endLine":2,"endColumn":24},{"ruleId":"71","severity":1,"message":"86","line":2,"column":31,"nodeType":"73","messageId":"74","endLine":2,"endColumn":40},{"ruleId":"71","severity":1,"message":"79","line":2,"column":42,"nodeType":"73","messageId":"74","endLine":2,"endColumn":55},{"ruleId":"71","severity":1,"message":"80","line":2,"column":57,"nodeType":"73","messageId":"74","endLine":2,"endColumn":67},{"ruleId":"71","severity":1,"message":"76","line":2,"column":69,"nodeType":"73","messageId":"74","endLine":2,"endColumn":80},{"ruleId":"71","severity":1,"message":"87","line":2,"column":96,"nodeType":"73","messageId":"74","endLine":2,"endColumn":101},{"ruleId":"81","severity":1,"message":"88","line":32,"column":34,"nodeType":"83","messageId":"84","endLine":32,"endColumn":36},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],["89"],["90"],"no-unused-vars","'NavDropdown' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'ListGroupItem' is defined but never used.","'InputGroup' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Row' is defined but never used.","'ListGroup' is defined but never used.","'Badge' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]